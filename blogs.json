{"status":"ok","feed":{"url":"https://medium.com/feed/@umairahmadmumtaz","title":"Stories by Umair Ahmad Mumtaz on Medium","link":"https://medium.com/@umairahmadmumtaz?source=rss-234f6f97728e------2","author":"","description":"Stories by Umair Ahmad Mumtaz on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*ajcqZu0-meSFEuzr50H47g.jpeg"},"items":[{"title":"Secure AWS Deployments with GitHub Actions: Using IAM Roles Instead of Access Keys","pubDate":"2025-07-16 06:03:06","link":"https://medium.com/@umairahmadmumtaz/secure-aws-deployments-with-github-actions-using-iam-roles-instead-of-access-keys-6a7a3f3c9cf4?source=rss-234f6f97728e------2","guid":"https://medium.com/p/6a7a3f3c9cf4","author":"Umair Ahmad Mumtaz","thumbnail":"","description":"\n<p>Say Goodbye to Hardcoded AWS Credentials\u200a\u2014\u200aA Step-by-Step Guide to OIDC Integration</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*weUtcsJzc7BjYHuZYCPRRQ.png\"></figure><h3>The Problem:</h3>\n<p>AWS Access Keys in GitHub Actions are a Security Risk. If you\u2019re using GitHub Actions to deploy to AWS, you\u2019ve probably stored your AWS credentials like\u00a0this:</p>\n<pre># \u274c Common but risky approach<br>env:<br>  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}<br>  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}</pre>\n<p><strong>This approach has serious security\u00a0flaws!</strong></p>\n<h3>What is\u00a0OIDC</h3>\n<h4>OIDC in Simple\u00a0Terms</h4>\n<p><strong>OpenID Connect (OIDC)</strong> is like a secure handshake between GitHub and AWS. Instead of GitHub storing your AWS password, it asks AWS: <em>\u201cHey, can I borrow some temporary access for this specific\u00a0task?\u201d</em></p>\n<p>AWS checks if GitHub is allowed to make this request, and if so, gives it a short-lived token (usually 15 minutes to 1 hour). No permanent passwords needed.</p>\n<h3>How It Works with GitHub\u00a0Actions</h3>\n<p>Here\u2019s the flow in simple\u00a0steps:</p>\n<ol>\n<li>\n<strong>GitHub Action starts</strong>: Your workflow begins\u00a0running</li>\n<li>\n<strong>GitHub requests access</strong>: \u201cI\u2019m GitHub, running a workflow from repository X\u201d</li>\n<li>\n<strong>AWS verifies</strong>: \u201cYes, I trust GitHub, and this repository is\u00a0allowed\u201d</li>\n<li>\n<strong>AWS gives temporary token</strong>: \u201cHere\u2019s access for the next\u00a0hour\u201d</li>\n<li>\n<strong>Workflow runs</strong>: Your deployment happens with the temporary token</li>\n<li>\n<strong>Token expires</strong>: Access automatically disappears</li>\n</ol>\n<pre># This is all you need in your workflow<br>- name: Configure AWS credentials<br>  uses: aws-actions/configure-aws-credentials@v4<br>  with:<br>    role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsRole<br>    aws-region: us-east-1</pre>\n<h3>Why This\u00a0Matters</h3>\n<h3>Security Benefits</h3>\n<ul>\n<li>\n<strong>No secrets to steal</strong>: Nothing valuable is stored in your repository</li>\n<li>\n<strong>Time-limited access</strong>: Even if compromised, access expires\u00a0quickly</li>\n<li>\n<strong>Specific permissions</strong>: Each repository can have different AWS permissions</li>\n</ul>\n<h3>Before vs\u00a0After</h3>\n<p><strong>Before (with access\u00a0keys):</strong></p>\n<pre>env:<br>  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}     # Permanent<br>  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Never expires<br>  # Risk: If leaked, works forever</pre>\n<p><strong>After (with\u00a0OIDC):</strong></p>\n<pre>with:<br>  role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsRole<br>  # No secrets stored<br>  # Access expires automatically<br>  # AWS controls permissions</pre>\n<h3>Step-by-Step Implementation</h3>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6a7a3f3c9cf4\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Say Goodbye to Hardcoded AWS Credentials\u200a\u2014\u200aA Step-by-Step Guide to OIDC Integration</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*weUtcsJzc7BjYHuZYCPRRQ.png\"></figure><h3>The Problem:</h3>\n<p>AWS Access Keys in GitHub Actions are a Security Risk. If you\u2019re using GitHub Actions to deploy to AWS, you\u2019ve probably stored your AWS credentials like\u00a0this:</p>\n<pre># \u274c Common but risky approach<br>env:<br>  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}<br>  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}</pre>\n<p><strong>This approach has serious security\u00a0flaws!</strong></p>\n<h3>What is\u00a0OIDC</h3>\n<h4>OIDC in Simple\u00a0Terms</h4>\n<p><strong>OpenID Connect (OIDC)</strong> is like a secure handshake between GitHub and AWS. Instead of GitHub storing your AWS password, it asks AWS: <em>\u201cHey, can I borrow some temporary access for this specific\u00a0task?\u201d</em></p>\n<p>AWS checks if GitHub is allowed to make this request, and if so, gives it a short-lived token (usually 15 minutes to 1 hour). No permanent passwords needed.</p>\n<h3>How It Works with GitHub\u00a0Actions</h3>\n<p>Here\u2019s the flow in simple\u00a0steps:</p>\n<ol>\n<li>\n<strong>GitHub Action starts</strong>: Your workflow begins\u00a0running</li>\n<li>\n<strong>GitHub requests access</strong>: \u201cI\u2019m GitHub, running a workflow from repository X\u201d</li>\n<li>\n<strong>AWS verifies</strong>: \u201cYes, I trust GitHub, and this repository is\u00a0allowed\u201d</li>\n<li>\n<strong>AWS gives temporary token</strong>: \u201cHere\u2019s access for the next\u00a0hour\u201d</li>\n<li>\n<strong>Workflow runs</strong>: Your deployment happens with the temporary token</li>\n<li>\n<strong>Token expires</strong>: Access automatically disappears</li>\n</ol>\n<pre># This is all you need in your workflow<br>- name: Configure AWS credentials<br>  uses: aws-actions/configure-aws-credentials@v4<br>  with:<br>    role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsRole<br>    aws-region: us-east-1</pre>\n<h3>Why This\u00a0Matters</h3>\n<h3>Security Benefits</h3>\n<ul>\n<li>\n<strong>No secrets to steal</strong>: Nothing valuable is stored in your repository</li>\n<li>\n<strong>Time-limited access</strong>: Even if compromised, access expires\u00a0quickly</li>\n<li>\n<strong>Specific permissions</strong>: Each repository can have different AWS permissions</li>\n</ul>\n<h3>Before vs\u00a0After</h3>\n<p><strong>Before (with access\u00a0keys):</strong></p>\n<pre>env:<br>  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}     # Permanent<br>  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Never expires<br>  # Risk: If leaked, works forever</pre>\n<p><strong>After (with\u00a0OIDC):</strong></p>\n<pre>with:<br>  role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsRole<br>  # No secrets stored<br>  # Access expires automatically<br>  # AWS controls permissions</pre>\n<h3>Step-by-Step Implementation</h3>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6a7a3f3c9cf4\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["github-actions","devops","aws","cicd"]}]}